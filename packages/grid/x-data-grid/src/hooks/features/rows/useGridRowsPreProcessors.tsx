import * as React from 'react';

import { GridApiCommunity } from '../../../models/api/gridApiCommunity';
import { GridRowTreeConfig } from '../../../models';
import {
  GRID_DEFAULT_STRATEGY,
  GridStrategyProcessor,
  useGridRegisterStrategyProcessor,
} from '../../core/strategyProcessing';
import { GRID_ROOT_GROUP_ID } from './gridRowsUtils';

const flatRowTreeCreationMethod: GridStrategyProcessor<'rowTreeCreation'> = ({
  ids,
  idRowsLookup,
  idToIdLookup,
  previousTree,
}) => {
  const tree: GridRowTreeConfig = {
    [GRID_ROOT_GROUP_ID]: {
      type: 'group',
      id: GRID_ROOT_GROUP_ID,
      depth: -1,
      groupingField: null,
      groupingKey: null,
      isAutoGenerated: true,
      children: ids,
      childrenExpanded: true,
      parent: null,
    },
  };
  for (let i = 0; i < ids.length; i += 1) {
    const rowId = ids[i];

    if (previousTree && previousTree[rowId]) {
      tree[rowId] = previousTree[rowId];
    } else {
      tree[rowId] = {
        id: rowId,
        depth: 0,
        parent: GRID_ROOT_GROUP_ID,
        type: 'leaf',
        groupingKey: null,
      };
    }
  }

  return {
    groupingName: GRID_DEFAULT_STRATEGY,
    tree,
    treeDepth: 1,
    idRowsLookup,
    idToIdLookup,
    ids,
  };
};

export const useGridRowsPreProcessors = (apiRef: React.MutableRefObject<GridApiCommunity>) => {
  useGridRegisterStrategyProcessor(
    apiRef,
    GRID_DEFAULT_STRATEGY,
    'rowTreeCreation',
    flatRowTreeCreationMethod,
  );
};
