import * as React from 'react';

import { GridApiCommunity } from '../../../models/api/gridApiCommunity';
import { GridRowTreeConfig } from '../../../models';
import {
  GRID_DEFAULT_STRATEGY,
  GridStrategyProcessor,
  useGridRegisterStrategyProcessor,
} from '../../core/strategyProcessing';
import { GRID_ROOT_GROUP_ID } from './gridRowsUtils';
import { gridRowTreeSelector } from './gridRowsSelector';

export const useGridRowsPreProcessors = (apiRef: React.MutableRefObject<GridApiCommunity>) => {
  const flatRowTreeCreationMethod = React.useCallback<GridStrategyProcessor<'rowTreeCreation'>>(
    (params) => {
      let tree: GridRowTreeConfig;
      if (params.partialUpdates) {
        tree = { ...gridRowTreeSelector(apiRef) };

        for (let i = 0; i < params.partialUpdates.actions.delete.length; i += 1) {
          const idToDelete = params.partialUpdates.actions.delete[i];
          delete tree[idToDelete];
        }

        for (let i = 0; i < params.partialUpdates.actions.insert.length; i += 1) {
          const idToInsert = params.partialUpdates.actions.insert[i];
          tree[idToInsert] = {
            id: idToInsert,
            depth: 0,
            parent: GRID_ROOT_GROUP_ID,
            type: 'leaf',
            groupingKey: null,
          };
        }
      } else {
        tree = {
          [GRID_ROOT_GROUP_ID]: {
            type: 'group',
            id: GRID_ROOT_GROUP_ID,
            depth: -1,
            groupingField: null,
            groupingKey: null,
            isAutoGenerated: true,
            // TODO: Stop using dataRowIdToIdLookup
            children: Object.values(params.dataRowIdToIdLookup),
            // TODO: Do we have to add the fake children from path here ?
            childrenFromPath: {},
            childrenExpanded: true,
            parent: null,
          },
        };

        const dataRowIds = Object.values(params.dataRowIdToIdLookup);
        for (let i = 0; i < dataRowIds.length; i += 1) {
          const rowId = dataRowIds[i];

          tree[rowId] = {
            id: rowId,
            depth: 0,
            parent: GRID_ROOT_GROUP_ID,
            type: 'leaf',
            groupingKey: null,
          };
        }
      }

      return {
        groupingName: GRID_DEFAULT_STRATEGY,
        tree,
        treeDepth: 1,
        autoGeneratedRowIdToIdLookup: {},
      };
    },
    [apiRef],
  );

  useGridRegisterStrategyProcessor(
    apiRef,
    GRID_DEFAULT_STRATEGY,
    'rowTreeCreation',
    flatRowTreeCreationMethod,
  );
};
