import * as React from 'react';

import { GridApiCommunity } from '../../../models/api/gridApiCommunity';
import {GridGroupNode, GridRowId, GridRowTreeConfig} from '../../../models';
import {
  GRID_DEFAULT_STRATEGY,
  GridStrategyProcessor,
  useGridRegisterStrategyProcessor,
} from '../../core/strategyProcessing';
import { GRID_ROOT_GROUP_ID } from './gridRowsUtils';

const flatRowTreeCreationMethod: GridStrategyProcessor<'rowTreeCreation'> = (params) => {
  let tree: GridRowTreeConfig;
  if (params.previousTree && params.partialUpdates) {
    tree = { ...params.previousTree };
    const idsToRemoveFromRootGroup: Record<GridRowId, true> = {}

    for (let i = 0; i < params.partialUpdates.actions.delete.length; i += 1) {
      const idToDelete = params.partialUpdates.actions.delete[i];
      idsToRemoveFromRootGroup[idToDelete] = true
      delete tree[idToDelete];
    }

    for (let i = 0; i < params.partialUpdates.actions.insert.length; i += 1) {
      const idToInsert = params.partialUpdates.actions.insert[i];
      tree[idToInsert] = {
        id: idToInsert,
        depth: 0,
        parent: GRID_ROOT_GROUP_ID,
        type: 'leaf',
        groupingKey: null,
      };
    }

    const rootGroup = (tree[GRID_ROOT_GROUP_ID] as GridGroupNode)
    let rootGroupChildren = [...rootGroup.children, ...params.partialUpdates.actions.insert]
    if (Object.values(idsToRemoveFromRootGroup)) {
      rootGroupChildren = rootGroupChildren.filter(id => !idsToRemoveFromRootGroup[id])
    }

    tree[GRID_ROOT_GROUP_ID] = {
      ...rootGroup,
      children: rootGroupChildren,
    }
  } else {
    tree = {
      [GRID_ROOT_GROUP_ID]: {
        type: 'group',
        id: GRID_ROOT_GROUP_ID,
        depth: -1,
        groupingField: null,
        groupingKey: null,
        isAutoGenerated: true,
        // TODO: Respect the order provided in props
        children: Object.values(params.dataRowIdToIdLookup),
        // TODO: Do we have to add the fake children from path here ?
        childrenFromPath: {},
        childrenExpanded: true,
        parent: null,
      },
    };

    const dataRowIds = Object.values(params.dataRowIdToIdLookup);
    for (let i = 0; i < dataRowIds.length; i += 1) {
      const rowId = dataRowIds[i];

      tree[rowId] = {
        id: rowId,
        depth: 0,
        parent: GRID_ROOT_GROUP_ID,
        type: 'leaf',
        groupingKey: null,
      };
    }
  }

  return {
    groupingName: GRID_DEFAULT_STRATEGY,
    tree,
    treeDepth: 1,
    autoGeneratedRowIdToIdLookup: {},
  };
}

export const useGridRowsPreProcessors = (apiRef: React.MutableRefObject<GridApiCommunity>) => {
  useGridRegisterStrategyProcessor(
    apiRef,
    GRID_DEFAULT_STRATEGY,
    'rowTreeCreation',
    flatRowTreeCreationMethod,
  );
};
