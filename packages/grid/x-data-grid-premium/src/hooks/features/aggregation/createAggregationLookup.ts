import * as React from 'react';
import {
  gridColumnLookupSelector,
  gridFilteredRowsLookupSelector,
  GridRowId,
  gridRowIdsSelector,
  GridRowTreeConfig,
  gridRowTreeSelector,
} from '@mui/x-data-grid-pro';
import { GridApiPremium } from '../../../models/gridApiPremium';
import { DataGridPremiumProcessedProps } from '../../../models/dataGridPremiumProps';
import {
  GridAggregationFunction,
  GridAggregationLookup,
  GridAggregationPosition,
} from './gridAggregationInterfaces';
import {
  canColumnHaveAggregationFunction,
  getSanitizedAggregationModel,
} from './gridAggregationUtils';
import { gridAggregationModelSelector } from './gridAggregationSelectors';

const getNonAutoGeneratedDescendants = (tree: GridRowTreeConfig, parentId: GridRowId) => {
  const children = tree[parentId].children;
  if (children == null) {
    return [];
  }

  const validDescendants: GridRowId[] = [];
  for (let i = 0; i < children.length; i += 1) {
    const child = children[i];
    const childNode = tree[child];
    if (!childNode.isAutoGenerated) {
      validDescendants.push(child);
    }
    validDescendants.push(...getNonAutoGeneratedDescendants(tree, childNode.id));
  }

  return validDescendants;
};

const getAggregationCellValue = ({
  apiRef,
  id,
  field,
  aggregationFunction,
  aggregatedRows,
  cellAggregationPosition,
}: {
  apiRef: React.MutableRefObject<GridApiPremium>;
  id: GridRowId;
  field: string;
  aggregationFunction: GridAggregationFunction;
  aggregatedRows: DataGridPremiumProcessedProps['aggregatedRows'];
  cellAggregationPosition: GridAggregationPosition;
}) => {
  const rowTree = gridRowTreeSelector(apiRef);
  const rowNode = apiRef.current.getRowNode(id)!;
  const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);

  let rowIds: GridRowId[];
  if (cellAggregationPosition === 'footer') {
    if (rowNode.parent == null) {
      rowIds = gridRowIdsSelector(apiRef).filter((rowId) => !rowTree[rowId].isAutoGenerated);
    } else {
      rowIds = getNonAutoGeneratedDescendants(rowTree, rowNode.parent);
    }
  } else {
    rowIds = getNonAutoGeneratedDescendants(rowTree, rowNode.id);
  }

  if (aggregatedRows === 'filtered') {
    rowIds = rowIds.filter((rowId) => filteredRowsLookup[rowId] !== false);
  }

  return aggregationFunction.apply({
    values: rowIds.map((rowId) => apiRef.current.getCellValue(rowId, field)),
  });
};

export const createAggregationLookup = ({
  apiRef,
  aggregationFunctions,
  aggregationPositionRef,
  aggregatedRows,
  isGroupAggregated,
}: {
  apiRef: React.MutableRefObject<GridApiPremium>;
  aggregationFunctions: Record<string, GridAggregationFunction>;
  aggregationPositionRef: React.MutableRefObject<GridAggregationPosition>;
  isGroupAggregated: DataGridPremiumProcessedProps['isGroupAggregated'];
  aggregatedRows: DataGridPremiumProcessedProps['aggregatedRows'];
}): GridAggregationLookup => {
  const aggregationPosition = aggregationPositionRef.current;

  const getRowAggregationPosition = (id: GridRowId): GridAggregationPosition | null => {
    const isGroup = id.toString().startsWith('auto-generated-row-');

    if (isGroup && aggregationPosition === 'inline') {
      if (isGroupAggregated && !isGroupAggregated(apiRef.current.getRowNode(id))) {
        return null;
      }

      return 'inline';
    }

    const isFooter = id.toString().startsWith('auto-generated-group-footer-');
    if (isFooter && aggregationPosition === 'footer') {
      // We don't have to check `isGroupAggregated` because if it returns false, the footer is not created at all
      return 'footer';
    }

    return null;
  };

  const sanitizedAggregationModel = getSanitizedAggregationModel({
    columnsLookup: gridColumnLookupSelector(apiRef),
    aggregationModel: gridAggregationModelSelector(apiRef),
    aggregationFunctions,
  });
  const aggregatedFields = Object.keys(sanitizedAggregationModel);
  if (aggregatedFields.length === 0) {
    return {};
  }

  const aggregationLookup: GridAggregationLookup = {};
  const columnsLookup = gridColumnLookupSelector(apiRef);
  const rowIds = gridRowIdsSelector(apiRef);

  for (let i = 0; i < rowIds.length; i += 1) {
    const rowId = rowIds[i];
    const rowAggregationLookup: GridAggregationLookup[GridRowId] = {};
    const cellAggregationPosition = getRowAggregationPosition(rowId);

    if (cellAggregationPosition != null) {
      for (let j = 0; j < aggregatedFields.length; j += 1) {
        const aggregatedField = aggregatedFields[j];
        const aggregationItem = sanitizedAggregationModel[aggregatedField];
        const aggregationFunction = aggregationFunctions[aggregationItem];
        const column = columnsLookup[aggregatedField];

        const shouldAggregate =
          column &&
          canColumnHaveAggregationFunction({
            column,
            aggregationFunction,
            aggregationFunctionName: aggregationItem,
          });

        if (shouldAggregate) {
          rowAggregationLookup[aggregatedField] = getAggregationCellValue({
            apiRef,
            id: rowId,
            field: aggregatedField,
            aggregationFunction,
            aggregatedRows,
            cellAggregationPosition,
          });
        }
      }

      aggregationLookup[rowId] = rowAggregationLookup;
    }
  }

  return aggregationLookup;
};
