import * as React from 'react';
import { GridColDef, GridRowId, gridRowIdsSelector } from '@mui/x-data-grid';
import { GridColumnRawLookup } from '@mui/x-data-grid/internals';
import { GridApiPro } from '../../../models/gridApiPro';
import {
  GridAggregationCellMeta,
  GridAggregationFunction,
  GridAggregationItem,
  GridAggregationModel,
} from './gridAggregationInterfaces';
import { GridStatePro } from '../../../models/gridStatePro';

const AGGREGATION_WRAPPABLE_METHODS = [
  'valueGetter',
  'valueFormatter',
  'renderCell',
  'filterOperators',
] as const;

type AggregationWrappableMethodName = typeof AGGREGATION_WRAPPABLE_METHODS[number];

type AggregationWrappedMethod<M extends Function | object> = M & {
  originalMethod?: M;
  isWrappedWithAggregation?: boolean;
};

type AggregationWrappedColDefProperty<M extends AggregationWrappableMethodName> = NonNullable<
  GridColDef[M]
> extends Function
  ? AggregationWrappedMethod<NonNullable<GridColDef[M]>> | undefined
  : NonNullable<GridColDef[M]> extends object[]
  ? AggregationWrappedMethod<NonNullable<GridColDef[M]>[number]>[]
  : never;

const getCellAggregationMode = (id: GridRowId, aggregationPosition: 'inline' | 'footer') => {
  const isGroup = id.toString().startsWith('auto-generated-row-');

  if (isGroup && aggregationPosition === 'inline') {
    return 'inline';
  }

  const isFooter = id.toString().startsWith('auto-generated-group-footer-');
  if (isFooter && aggregationPosition === 'footer') {
    return 'footer';
  }

  return null;
};

const getWrappedValueGetter = ({
  apiRef,
  valueGetter,
  aggregationPosition,
  aggregationFunction,
}: {
  apiRef: React.MutableRefObject<GridApiPro>;
  valueGetter: GridColDef['valueGetter'];
  aggregationPosition: 'inline' | 'footer';
  aggregationFunction: GridAggregationFunction;
}): AggregationWrappedColDefProperty<'valueGetter'> => {
  const wrappedValueGetter: AggregationWrappedColDefProperty<'valueGetter'> = (params) => {
    if (params.rowNode.isAutoGenerated) {
      const cellAggregationMode = getCellAggregationMode(params.id, aggregationPosition);
      if (cellAggregationMode) {
        let rowIds: GridRowId[] | undefined;
        if (cellAggregationMode === 'footer') {
          if (params.rowNode.parent == null) {
            rowIds = gridRowIdsSelector(apiRef);
          } else {
            rowIds = apiRef.current.getRowNode(params.rowNode.parent)?.children;
          }
        } else {
          rowIds = params.rowNode.children;
        }

        const validRowIds = (rowIds ?? []).filter(
          (rowId) => !apiRef.current.getRowNode(rowId)?.isAutoGenerated,
        );

        return aggregationFunction.apply({
          values: validRowIds.map((rowId) => apiRef.current.getCellValue(rowId, params.field)),
        });
      }
    }

    if (valueGetter) {
      return valueGetter(params);
    }

    return params.row[params.field];
  };

  wrappedValueGetter.isWrappedWithAggregation = true;
  wrappedValueGetter.originalMethod = valueGetter;

  return wrappedValueGetter;
};

const getWrappedValueFormatter = ({
  valueFormatter,
  aggregationPosition,
  aggregationFunction,
}: {
  valueFormatter: GridColDef['valueFormatter'];
  aggregationPosition: 'inline' | 'footer';
  aggregationFunction: GridAggregationFunction;
}): AggregationWrappedColDefProperty<'valueFormatter'> | undefined => {
  if (!aggregationFunction.valueFormatter) {
    return valueFormatter;
  }

  const wrappedValueFormatter: AggregationWrappedColDefProperty<'valueFormatter'> = (params) => {
    if (params.id != null) {
      const cellAggregationMode = getCellAggregationMode(params.id, aggregationPosition);
      if (cellAggregationMode) {
        return aggregationFunction.valueFormatter!(params);
      }
    }

    if (valueFormatter) {
      return valueFormatter(params);
    }

    return params.value;
  };

  wrappedValueFormatter.isWrappedWithAggregation = true;
  wrappedValueFormatter.originalMethod = valueFormatter;

  return wrappedValueFormatter;
};

const getWrappedRenderCell = ({
  renderCell,
  aggregationPosition,
  aggregationFunction,
  aggregationItem,
}: {
  renderCell: GridColDef['renderCell'];
  aggregationPosition: 'inline' | 'footer';
  aggregationFunction: GridAggregationFunction;
  aggregationItem: GridAggregationItem;
}): AggregationWrappedColDefProperty<'renderCell'> | undefined => {
  if (!renderCell) {
    return undefined;
  }

  const aggregationMeta: GridAggregationCellMeta = {
    hasCellUnit: aggregationFunction.hasCellUnit ?? true,
    name: aggregationItem.functionName,
  };

  const wrappedRenderCell: AggregationWrappedColDefProperty<'renderCell'> = (params) => {
    const cellAggregationMode = getCellAggregationMode(params.id, aggregationPosition);
    if (cellAggregationMode) {
      return renderCell({ ...params, aggregation: aggregationMeta });
    }

    return renderCell(params);
  };
  wrappedRenderCell.isWrappedWithAggregation = true;
  wrappedRenderCell.originalMethod = renderCell;

  return wrappedRenderCell;
};

const getWrappedFilterOperators = ({
  filterOperators,
}: {
  filterOperators: GridColDef['filterOperators'];
}): AggregationWrappedColDefProperty<'filterOperators'> => {
  return filterOperators!.map((operator) => {
    return {
      ...operator,
      getApplyFilterFn: (filterItem, column) => {
        const originalFn = operator.getApplyFilterFn(filterItem, column);
        if (!originalFn) {
          return null;
        }

        return (params) => {
          // We only want to filter leaves
          // TODO: Improve check to only skip aggregation autogenerate rows
          if (params.rowNode.isAutoGenerated) {
            return true;
          }

          return originalFn(params);
        };
      },
    };
  });
};

export const wrapColumnWithAggregation = ({
  colDef,
  apiRef,
  aggregationItem,
  aggregationFunctions,
  aggregationPositionRef,
}: {
  colDef: GridColDef;
  apiRef: React.MutableRefObject<GridApiPro>;
  aggregationItem: GridAggregationItem;
  aggregationFunctions: Record<string, GridAggregationFunction>;
  aggregationPositionRef: React.MutableRefObject<'inline' | 'footer'>;
}): GridColDef => {
  const aggregationFunction = aggregationFunctions?.[aggregationItem.functionName];
  if (!aggregationFunction) {
    throw new Error(
      `MUI: No aggregation registered with the name ${aggregationItem?.functionName}`,
    );
  }

  if (!aggregationFunction.types.includes(colDef.type!)) {
    throw new Error(
      `MUI: The current aggregation function is not application to the type "${colDef.type}"`,
    );
  }

  const aggregationPosition = aggregationPositionRef.current;

  return {
    ...colDef,
    valueGetter: getWrappedValueGetter({
      apiRef,
      valueGetter: colDef.valueGetter,
      aggregationPosition,
      aggregationFunction,
    }),
    valueFormatter: getWrappedValueFormatter({
      valueFormatter: colDef.valueFormatter,
      aggregationPosition,
      aggregationFunction,
    }),
    renderCell: getWrappedRenderCell({
      renderCell: colDef.renderCell,
      aggregationPosition,
      aggregationFunction,
      aggregationItem,
    }),
    filterOperators: getWrappedFilterOperators({
      filterOperators: colDef.filterOperators,
    }),
  };
};

export const unwrapColumnFromAggregation = ({ colDef }: { colDef: GridColDef }) => {
  let hasUnwrappedSomeProperty = false;

  const unwrappedColDef: GridColDef = { ...colDef };

  AGGREGATION_WRAPPABLE_METHODS.forEach((propertyName) => {
    const propertyValue = unwrappedColDef[propertyName];
    if (propertyValue == null) {
      return;
    }

    if (Array.isArray(propertyValue)) {
      let hasUnwrappedSomeSubProperty = false;
      const unwrappedPropertyValue: any = [];

      propertyValue.forEach((propertySubValue) => {
        if ((propertySubValue as any).isWrappedWithAggregation) {
          hasUnwrappedSomeSubProperty = true;
          unwrappedPropertyValue.push((propertySubValue as any).originalMethod);
        } else {
          unwrappedPropertyValue.push(propertySubValue);
        }

        if (hasUnwrappedSomeSubProperty) {
          hasUnwrappedSomeProperty = true;
          unwrappedColDef[propertyName] = unwrappedPropertyValue;
        }
      });
    }

    if ((propertyValue as any)?.isWrappedWithAggregation) {
      hasUnwrappedSomeProperty = true;
      unwrappedColDef[propertyName] = (propertyValue as any).originalMethod;
    }
  });

  if (!hasUnwrappedSomeProperty) {
    return colDef;
  }

  return unwrappedColDef;
};

export const getAvailableAggregationFunctions = ({
  aggregationFunctions,
  column,
}: {
  aggregationFunctions: Record<string, GridAggregationFunction>;
  column: GridColDef;
}) => {
  if (column.aggregable === false) {
    return [];
  }

  if (column.availableAggregationFunctions != null) {
    return column.availableAggregationFunctions;
  }

  return Object.keys(aggregationFunctions).filter((name) =>
    aggregationFunctions[name].types.includes(column.type!),
  );
};

export const mergeStateWithAggregationModel =
  (aggregationModel: GridAggregationModel) =>
  (state: GridStatePro): GridStatePro => ({
    ...state,
    aggregation: { ...state.aggregation, model: aggregationModel },
  });

export const sanitizeAggregationModel = (
  model: GridAggregationModel,
  columnsLookup: GridColumnRawLookup,
) => {
  const sanitizedModel: GridAggregationModel = {};

  Object.keys(model).forEach((field) => {
    if (columnsLookup[field] && columnsLookup[field].aggregable !== false) {
      sanitizedModel[field] = model[field];
    }
  });

  return model;
};
