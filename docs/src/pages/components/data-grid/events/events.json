[
  {
    "name": "cellClick",
    "description": "Fired when a cell is clicked.",
    "params": "GridCellParams<any, any, any>",
    "event": "MouseEvent<HTMLElement, MouseEvent>"
  },
  {
    "name": "cellDoubleClick",
    "description": "Fired when a cell is double-clicked.",
    "params": "GridCellParams<any, any, any>",
    "event": "MouseEvent<HTMLElement, MouseEvent>"
  },
  {
    "name": "cellEditCommit",
    "description": "Fired when the props of the edit input are committed.",
    "params": "GridCellEditCommitParams",
    "event": "MuiBaseEvent"
  },
  {
    "name": "cellEditStart",
    "description": "Fired when the cell turns to edit mode.",
    "params": "GridCellParams<any, any, any>",
    "event": "KeyboardEvent<HTMLElement> | MouseEvent<HTMLElement, MouseEvent>"
  },
  {
    "name": "cellEditStop",
    "description": "Fired when the cell turns back to view mode.",
    "params": "GridCellParams<any, any, any>",
    "event": "MuiBaseEvent"
  },
  {
    "name": "cellFocusIn",
    "description": "Fired when a cell gains focus.",
    "params": "GridCellParams<any, any, any>"
  },
  {
    "name": "cellFocusOut",
    "description": "Fired when a cell loses focus.",
    "params": "GridCellParams<any, any, any>",
    "event": "MuiBaseEvent"
  },
  {
    "name": "cellKeyDown",
    "description": "Fired when a <code>keydown</code> event happens in a cell.",
    "params": "GridCellParams<any, any, any>",
    "event": "KeyboardEvent<HTMLElement>"
  },
  {
    "name": "cellMouseDown",
    "description": "Fired when a <code>mousedown</code> event happens in a cell..",
    "params": "GridCellParams<any, any, any>",
    "event": "MouseEvent<HTMLElement, MouseEvent>"
  },
  {
    "name": "cellMouseUp",
    "description": "Fired when a <code>mouseup</code> event happens in a cell..",
    "params": "GridCellParams<any, any, any>",
    "event": "MouseEvent<HTMLElement, MouseEvent>"
  },
  {
    "name": "columnHeaderClick",
    "description": "Fired when a column header is clicked",
    "params": "GridColumnHeaderParams",
    "event": "MouseEvent<HTMLElement, MouseEvent>"
  },
  {
    "name": "columnHeaderDoubleClick",
    "description": "Fired when a column header is double-clicked.",
    "params": "GridColumnHeaderParams",
    "event": "MouseEvent<HTMLElement, MouseEvent>"
  },
  {
    "name": "columnHeaderKeyDown",
    "description": "Fired when a key is pressed in a column header. It&#39;s mapped do the <code>keydown</code> DOM event.",
    "params": "GridColumnHeaderParams",
    "event": "KeyboardEvent<HTMLElement>"
  },
  {
    "name": "columnOrderChange",
    "description": "Fired when the user ends reordering a column.",
    "params": "GridColumnOrderChangeParams"
  },
  {
    "name": "columnResize",
    "description": "Fired during the resizing of a column.",
    "params": "GridColumnResizeParams",
    "event": "MouseEvent"
  },
  {
    "name": "columnResizeStart",
    "description": "Fired when the user starts resizing a column.",
    "params": "{ field: string }",
    "event": "MouseEvent<HTMLElement, MouseEvent>"
  },
  {
    "name": "columnResizeStop",
    "description": "Fired when the user stops resizing a column.",
    "params": "null",
    "event": "MouseEvent"
  },
  {
    "name": "columnsChange",
    "description": "Fired when the columns state is changed.",
    "params": "string[]"
  },
  {
    "name": "columnVisibilityChange",
    "description": "Fired when a column visibility changes.",
    "params": "GridColumnVisibilityChangeParams"
  },
  {
    "name": "columnWidthChange",
    "description": "Fired when the width of a column is changed.",
    "params": "GridColumnResizeParams",
    "event": " | MouseEvent"
  },
  {
    "name": "componentError",
    "description": "Fired when an exception is thrown in the grid.",
    "params": "any"
  },
  {
    "name": "debouncedResize",
    "description": "Fired when the grid is resized with a debounced time of 60ms.",
    "params": "ElementSize"
  },
  {
    "name": "editCellPropsChange",
    "description": "Fired when the props of the edit cell changes.",
    "params": "GridEditCellPropsParams",
    "event": " | SyntheticEvent<HTMLElement, Event>"
  },
  {
    "name": "editRowsModelChange",
    "description": "Fired when the row editing model changes.",
    "params": "GridEditRowsModel"
  },
  {
    "name": "filterModelChange",
    "description": "Fired when the filter model changes.",
    "params": "GridFilterModel"
  },
  {
    "name": "headerSelectionCheckboxChange",
    "description": "Fired when the value of the selection checkbox of the header is changed",
    "params": "GridHeaderSelectionCheckboxParams"
  },
  { "name": "pageChange", "description": "Fired when the page changes.", "params": "number" },
  {
    "name": "pageSizeChange",
    "description": "Fired when the page size changes.",
    "params": "number"
  },
  { "name": "resize", "description": "Fired when the grid is resized.", "params": "ElementSize" },
  {
    "name": "rowClick",
    "description": "Fired when a row is clicked.",
    "params": "GridRowParams<{ [key: string]: any }>",
    "event": "MouseEvent<HTMLElement, MouseEvent>"
  },
  {
    "name": "rowDoubleClick",
    "description": "Fired when a row is double-clicked.",
    "params": "GridRowParams<{ [key: string]: any }>",
    "event": "MouseEvent<HTMLElement, MouseEvent>"
  },
  {
    "name": "rowEditCommit",
    "description": "Fired when the props of the edit input are committed.",
    "params": "GridRowId",
    "event": "MuiBaseEvent"
  },
  {
    "name": "rowEditStart",
    "description": "Fired when the row turns to edit mode.",
    "params": "GridRowParams<{ [key: string]: any }>",
    "event": "KeyboardEvent<HTMLElement> | MouseEvent<HTMLElement, MouseEvent>"
  },
  {
    "name": "rowEditStop",
    "description": "Fired when the row turns back to view mode.",
    "params": "GridRowParams<{ [key: string]: any }>",
    "event": "MuiBaseEvent"
  },
  {
    "name": "rowSelectionCheckboxChange",
    "description": "Fired when the value of the selection checkbox of a row is changed",
    "params": "GridRowSelectionCheckboxParams",
    "event": "ChangeEvent<HTMLElement>"
  },
  {
    "name": "rowsScroll",
    "description": "Fired during the scroll of the grid viewport.",
    "params": "GridScrollParams"
  },
  {
    "name": "rowsScrollEnd",
    "description": "Fired when scrolling to the bottom of the grid viewport.",
    "params": "GridRowScrollEndParams"
  },
  {
    "name": "selectionChange",
    "description": "Fired when the selection state of one or multiple rows changes.",
    "params": "GridSelectionModel"
  },
  {
    "name": "sortModelChange",
    "description": "Fired when the sort model changes.",
    "params": "GridSortModel"
  },
  {
    "name": "stateChange",
    "description": "Fired when the state of the grid is updated.",
    "params": "GridState"
  },
  { "name": "unmount", "description": "Fired when the grid is unmounted." }
]
