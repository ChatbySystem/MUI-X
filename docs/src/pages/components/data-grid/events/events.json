[
  {
    "name": "cellClick",
    "description": "Fired when a cell is clicked.",
    "params": "GridCellParams<any, any, any>",
    "event": "MuiEvent<MouseEvent<HTMLElement, MouseEvent>>"
  },
  {
    "name": "cellDoubleClick",
    "description": "Fired when a cell is double-clicked.",
    "params": "GridCellParams<any, any, any>",
    "event": "MuiEvent<MouseEvent<HTMLElement, MouseEvent>>"
  },
  {
    "name": "cellDragEnter",
    "description": "Fired when the dragged cell enters a valid drop target. It&#39;s mapped to the <code>dragend</code> DOM event.",
    "params": "GridCellParams<any, any, any>",
    "event": "MuiEvent<DragEvent<HTMLElement>>"
  },
  {
    "name": "cellDragOver",
    "description": "Fired while an element or text selection is dragged over the cell.\nIt&#39;s mapped to the <code>dragover</code> DOM event.",
    "params": "GridCellParams<any, any, any>",
    "event": "MuiEvent<DragEvent<HTMLElement>>"
  },
  {
    "name": "cellEditCommit",
    "description": "Fired when the props of the edit input are committed.",
    "params": "GridCellEditCommitParams",
    "event": "MuiEvent<MuiBaseEvent>"
  },
  {
    "name": "cellEditStart",
    "description": "Fired when the cell turns to edit mode.",
    "params": "GridCellParams<any, any, any>",
    "event": "MuiEvent<MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent<HTMLElement>>"
  },
  {
    "name": "cellEditStop",
    "description": "Fired when the cell turns back to view mode.",
    "params": "GridCellParams<any, any, any>",
    "event": "MuiEvent<MuiBaseEvent>"
  },
  {
    "name": "cellFocusIn",
    "description": "Fired when a cell gains focus.",
    "params": "GridCellParams<any, any, any>",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "cellFocusOut",
    "description": "Fired when a cell loses focus.",
    "params": "GridCellParams<any, any, any>",
    "event": "MuiEvent<MuiBaseEvent>"
  },
  {
    "name": "cellKeyDown",
    "description": "Fired when a <code>keydown</code> event happens in a cell.",
    "params": "GridCellParams<any, any, any>",
    "event": "MuiEvent<KeyboardEvent<HTMLElement>>"
  },
  {
    "name": "cellModeChange",
    "description": "Fired when the mode of a cell changes.",
    "params": "GridCellParams<any, any, any>",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "cellMouseDown",
    "description": "Fired when a <code>mousedown</code> event happens in a cell..",
    "params": "GridCellParams<any, any, any>",
    "event": "MuiEvent<MouseEvent<HTMLElement, MouseEvent>>"
  },
  {
    "name": "cellMouseUp",
    "description": "Fired when a <code>mouseup</code> event happens in a cell..",
    "params": "GridCellParams<any, any, any>",
    "event": "MuiEvent<MouseEvent<HTMLElement, MouseEvent>>"
  },
  {
    "name": "cellNavigationKeyDown",
    "description": "Fired when a <a href=\"/components/data-grid/accessibility#keyboard-navigation\">navigation key</a> is pressed in a cell.",
    "params": "GridCellParams<any, any, any> | GridRowParams<{ [key: string]: any; }>",
    "event": "MuiEvent<KeyboardEvent<HTMLElement>>"
  },
  {
    "name": "columnHeaderBlur",
    "description": "Fired when a column header loses focus.",
    "params": "GridColumnHeaderParams",
    "event": "MuiEvent<FocusEvent<HTMLElement, Element>>"
  },
  {
    "name": "columnHeaderClick",
    "description": "Fired when a column header is clicked",
    "params": "GridColumnHeaderParams",
    "event": "MuiEvent<MouseEvent<HTMLElement, MouseEvent>>"
  },
  {
    "name": "columnHeaderDoubleClick",
    "description": "Fired when a column header is double-clicked.",
    "params": "GridColumnHeaderParams",
    "event": "MuiEvent<MouseEvent<HTMLElement, MouseEvent>>"
  },
  {
    "name": "columnHeaderDragEnd",
    "description": "Fired when the dragging of a column header ends.",
    "params": "GridColumnHeaderParams",
    "event": "MuiEvent<DragEvent<HTMLElement>>"
  },
  {
    "name": "columnHeaderDragEnter",
    "description": "Fired when the dragged column header enters a valid drop target.\nIt&#39;s mapped to the <code>dragend</code> DOM event.",
    "params": "GridColumnHeaderParams",
    "event": "MuiEvent<DragEvent<HTMLElement>>"
  },
  {
    "name": "columnHeaderDragOver",
    "description": "Fired while an element or text selection is dragged over the column header.\nIt&#39;s mapped to the <code>dragover</code> DOM event.",
    "params": "GridColumnHeaderParams",
    "event": "MuiEvent<DragEvent<HTMLElement>>"
  },
  {
    "name": "columnHeaderDragStart",
    "description": "Fired when the user starts dragging a column header. It&#39;s mapped to the <code>dragstart</code> DOM event.",
    "params": "GridColumnHeaderParams",
    "event": "MuiEvent<DragEvent<HTMLElement>>"
  },
  {
    "name": "columnHeaderEnter",
    "description": "Fired when a <code>mouseenter</code> event happens in a column header.",
    "params": "GridColumnHeaderParams",
    "event": "MuiEvent<MouseEvent<HTMLElement, MouseEvent>>"
  },
  {
    "name": "columnHeaderFocus",
    "description": "Fired when a column header gains focus.",
    "params": "GridColumnHeaderParams",
    "event": "MuiEvent<FocusEvent<HTMLElement, Element>>"
  },
  {
    "name": "columnHeaderKeyDown",
    "description": "Fired when a key is pressed in a column header. It&#39;s mapped do the <code>keydown</code> DOM event.",
    "params": "GridColumnHeaderParams",
    "event": "MuiEvent<KeyboardEvent<HTMLElement>>"
  },
  {
    "name": "columnHeaderLeave",
    "description": "Fired when a <code>mouseleave</code> event happens in a column header.",
    "params": "GridColumnHeaderParams",
    "event": "MuiEvent<MouseEvent<HTMLElement, MouseEvent>>"
  },
  {
    "name": "columnHeaderNavigationKeyDown",
    "description": "Fired when a <a href=\"/components/data-grid/accessibility#keyboard-navigation\">navigation key</a> is pressed in a column header.",
    "params": "GridColumnHeaderParams",
    "event": "MuiEvent<KeyboardEvent<HTMLElement>>"
  },
  {
    "name": "columnHeaderOut",
    "description": "Fired when a <code>mouseout</code> event happens in a column header.",
    "params": "GridColumnHeaderParams",
    "event": "MuiEvent<MouseEvent<HTMLElement, MouseEvent>>"
  },
  {
    "name": "columnHeaderOver",
    "description": "Fired when a <code>mouseover</code> event happens in a column header.",
    "params": "GridColumnHeaderParams",
    "event": "MuiEvent<MouseEvent<HTMLElement, MouseEvent>>"
  },
  {
    "name": "columnOrderChange",
    "description": "Fired when the user ends reordering a column.",
    "params": "GridColumnOrderChangeParams",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "columnResize",
    "description": "Fired during the resizing of a column.",
    "params": "GridColumnResizeParams",
    "event": "MuiEvent<MouseEvent>"
  },
  {
    "name": "columnResizeStart",
    "description": "Fired when the user starts resizing a column.",
    "params": "{ field: string; }",
    "event": "MuiEvent<MouseEvent<HTMLElement, MouseEvent>>"
  },
  {
    "name": "columnResizeStop",
    "description": "Fired when the user stops resizing a column.",
    "params": "null",
    "event": "MuiEvent<MouseEvent>"
  },
  {
    "name": "columnsChange",
    "description": "Fired when the columns state is changed.",
    "params": "string[]",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "columnSeparatorMouseDown",
    "description": "Fired when a <code>mousedown</code> DOM event happens in the column header separator.",
    "params": "GridColumnHeaderParams",
    "event": "MuiEvent<MouseEvent<HTMLElement, MouseEvent>>"
  },
  {
    "name": "columnVisibilityChange",
    "description": "Fired when a column visibility changes.",
    "params": "GridColumnVisibilityChangeParams",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "columnWidthChange",
    "description": "Fired when the width of a column is changed.",
    "params": "GridColumnResizeParams",
    "event": "MuiEvent<{} | MouseEvent>"
  },
  {
    "name": "componentError",
    "description": "Fired when an exception is thrown in the grid.",
    "params": "any",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "debouncedResize",
    "description": "Fired when the grid is resized with a debounced time of 60ms.",
    "params": "ElementSize",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "editCellPropsChange",
    "description": "Fired when the props of the edit cell changes.",
    "params": "GridEditCellPropsParams",
    "event": "MuiEvent<{} | SyntheticEvent<HTMLElement, Event>>"
  },
  {
    "name": "editRowsModelChange",
    "description": "Fired when the row editing model changes.",
    "params": "GridEditRowsModel",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "filterModelChange",
    "description": "Fired when the filter model changes.",
    "params": "GridFilterModel",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "headerSelectionCheckboxChange",
    "description": "Fired when the value of the selection checkbox of the header is changed",
    "params": "GridHeaderSelectionCheckboxParams",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "pageChange",
    "description": "Fired when the page changes.",
    "params": "number",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "pageSizeChange",
    "description": "Fired when the page size changes.",
    "params": "number",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "preProcessorRegister",
    "description": "Fired when a pre-processor is registered.",
    "params": "GridPreProcessingGroup",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "preProcessorUnregister",
    "description": "Fired when a pre-processor is unregistered.",
    "params": "GridPreProcessingGroup",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "resize",
    "description": "Fired when the grid is resized.",
    "params": "ElementSize",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "rowClick",
    "description": "Fired when a row is clicked.",
    "params": "GridRowParams<{ [key: string]: any; }>",
    "event": "MuiEvent<MouseEvent<HTMLElement, MouseEvent>>"
  },
  {
    "name": "rowDoubleClick",
    "description": "Fired when a row is double-clicked.",
    "params": "GridRowParams<{ [key: string]: any; }>",
    "event": "MuiEvent<MouseEvent<HTMLElement, MouseEvent>>"
  },
  {
    "name": "rowEditCommit",
    "description": "Fired when the props of the edit input are committed.",
    "params": "GridRowId",
    "event": "MuiEvent<MuiBaseEvent>"
  },
  {
    "name": "rowEditStart",
    "description": "Fired when the row turns to edit mode.",
    "params": "GridRowParams<{ [key: string]: any; }>",
    "event": "MuiEvent<MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent<HTMLElement>>"
  },
  {
    "name": "rowEditStop",
    "description": "Fired when the row turns back to view mode.",
    "params": "GridRowParams<{ [key: string]: any; }>",
    "event": "MuiEvent<MuiBaseEvent>"
  },
  {
    "name": "rowExpansionChange",
    "description": "Fired when the expansion of a row is changed. Called with a GridRowTreeNodeConfig object.",
    "params": "GridRowTreeNodeConfig",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "rowGroupsPreProcessingChange",
    "description": "Fired when the row grouping function is changed",
    "params": "",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "rowSelectionCheckboxChange",
    "description": "Fired when the value of the selection checkbox of a row is changed",
    "params": "GridRowSelectionCheckboxParams",
    "event": "MuiEvent<ChangeEvent<HTMLElement>>"
  },
  {
    "name": "rowsScroll",
    "description": "Fired during the scroll of the grid viewport.",
    "params": "GridScrollParams",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "rowsScrollEnd",
    "description": "Fired when scrolling to the bottom of the grid viewport.",
    "params": "GridRowScrollEndParams",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "rowsSet",
    "description": "Fired when the rows are updated.",
    "params": "",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "selectionChange",
    "description": "Fired when the selection state of one or multiple rows changes.",
    "params": "GridSelectionModel",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "sortModelChange",
    "description": "Fired when the sort model changes.",
    "params": "GridSortModel",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "stateChange",
    "description": "Fired when the state of the grid is updated.",
    "params": "GridState",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "unmount",
    "description": "Fired when the grid is unmounted.",
    "params": "",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "viewportInnerSizeChange",
    "description": "Fired when the inner size of the viewport changes. Called with an ElementSize object.",
    "params": "ElementSize",
    "event": "MuiEvent<{}>"
  },
  {
    "name": "visibleRowsSet",
    "description": "Fired when the visible rows are updated",
    "params": "",
    "event": "MuiEvent<{}>"
  }
]
