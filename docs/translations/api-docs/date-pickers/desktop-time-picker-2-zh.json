{
  "componentDescription": "",
  "propDescriptions": {
    "ampm": "12h/24h view for hour selection clock.",
    "ampmInClock": "Display ampm controls under the clock (instead of in the toolbar).",
    "className": "Class name applied to the root element.",
    "closeOnSelect": "If <code>true</code> the popup or dialog will immediately close after submitting full date.",
    "components": "Overrideable components.",
    "componentsProps": "The props used for each component slot.",
    "defaultValue": "The default value. Used when the component is not controlled.",
    "disabled": "If <code>true</code>, the picker and text field are disabled.",
    "disableFuture": "If <code>true</code> disable values before the current time",
    "disableIgnoringDatePartForTimeValidation": "Do not ignore date part when validating min/max time.",
    "disableOpenPicker": "Do not render open picker button (renders only the field).",
    "disablePast": "If <code>true</code> disable values after the current time.",
    "inputFormat": "Format of the date when rendered in the input(s).",
    "inputRef": "Pass a ref to the <code>input</code> element.",
    "label": "The label content.",
    "localeText": "Locale for components texts",
    "maxTime": "Max time acceptable time. For input validation date part of passed object will be ignored if <code>disableIgnoringDatePartForTimeValidation</code> not specified.",
    "minTime": "Min time acceptable time. For input validation date part of passed object will be ignored if <code>disableIgnoringDatePartForTimeValidation</code> not specified.",
    "minutesStep": "Step over minutes.",
    "onAccept": "Callback fired when date is accepted @DateIOType.<br><br><strong>Signature:</strong><br><code>function(value: TValue) =&gt; void</code><br><em>value:</em> The value that was just accepted.",
    "onChange": "Callback fired when the value (the selected date) changes.<br><br><strong>Signature:</strong><br><code>function(value: TValue) =&gt; void</code><br><em>value:</em> The new value.",
    "onClose": "Callback fired when the popup requests to be closed. Use in controlled mode (see open).",
    "onError": "Callback that fired when input value or new <code>value</code> prop validation returns <strong>new</strong> validation error (or value is valid after error). In case of validation error detected <code>reason</code> prop return non-null value and <code>TextField</code> must be displayed in <code>error</code> state. This can be used to render appropriate form error.<br><a href=\"https://next.material-ui-pickers.dev/guides/forms\">Read the guide</a> about form integration and error displaying.<br><br><strong>Signature:</strong><br><code>function(reason: TError, value: TValue) =&gt; void</code><br><em>reason:</em> The reason why the current value is not valid.<br><em>value:</em> The invalid value.",
    "onOpen": "Callback fired when the popup requests to be opened. Use in controlled mode (see open).",
    "onSelectedSectionsChange": "Callback fired when the selected sections change.<br><br><strong>Signature:</strong><br><code>function(newValue: FieldSelectedSections) =&gt; void</code><br><em>newValue:</em> The new selected sections.",
    "onViewChange": "Callback fired on view change.<br><br><strong>Signature:</strong><br><code>function(view: View) =&gt; void</code><br><em>view:</em> The new view.",
    "open": "Control the popup or dialog open state.",
    "openTo": "First view to show.",
    "orientation": "Force rendering in particular orientation.",
    "selectedSections": "The currently selected sections. This prop accept four formats: 1. If a number is provided, the section at this index will be selected. 2. If an object with a <code>startIndex</code> and <code>endIndex</code> properties are provided, the sections between those two indexes will be selected. 3. If a string of type <code>MuiDateSectionName</code> is provided, the first section with that name will be selected. 4. If <code>null</code> is provided, no section will be selected If not provided, the selected sections will be handled internally.",
    "shouldDisableTime": "Dynamically check if time is disabled or not. If returns <code>false</code> appropriate time point will ot be acceptable.<br><br><strong>Signature:</strong><br><code>function(timeValue: number, view: ClockPickerView) =&gt; boolean</code><br><em>timeValue:</em> The value to check.<br><em>view:</em> The clock type of the timeValue.<br> <em>returns</em> (boolean): Returns <code>true</code> if the time should be disabled",
    "showToolbar": "If <code>true</code>, the toolbar will be visible.",
    "sx": "The system prop that allows defining system overrides as well as additional CSS styles. See the <a href=\"/system/getting-started/the-sx-prop/\">`sx` page</a> for more details.",
    "value": "The value of the picker.",
    "views": "Array of views to show."
  },
  "classDescriptions": {},
  "slotDescriptions": {
    "Toolbar": "Custom component for the toolbar rendered above the views.",
    "PreviousIconButton": "Button allowing to switch to the left view.",
    "NextIconButton": "Button allowing to switch to the right view.",
    "LeftArrowIcon": "Icon displayed in the left view switch button.",
    "RightArrowIcon": "Icon displayed in the right view switch button.",
    "DesktopPaper": "Custom component for the paper rendered inside the desktop picker&#39;s Popper.",
    "DesktopTransition": "Custom component for the desktop popper <a href=\"https://mui.com/material-ui/transitions\">Transition</a>.",
    "DesktopTrapFocus": "Custom component for trapping the focus inside the views on desktop.",
    "Popper": "Custom component for the popper inside which the views are rendered on desktop.",
    "PaperContent": "Custom component wrapping the views of the desktop and static pickers (it is the direct child of the Paper component).",
    "ActionBar": "Custom component for the action bar, it is placed bellow the picker views.",
    "Input": "",
    "InputAdornment": "Component displayed on the start or end input adornment used to open the picker on desktop.",
    "OpenPickerButton": "Button to open the picker on desktop.",
    "Field": "",
    "OpenPickerIcon": "Icon displayed in the open picker button on desktop."
  }
}
