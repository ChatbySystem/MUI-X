{
  "name": "GridApi",
  "description": "The full grid API.",
  "properties": [
    {
      "name": "applyFilter",
      "description": "Applies a GridFilterItem on alls rows. If no <code>linkOperator</code> is given, the &quot;AND&quot; operator is used.",
      "type": "(item: GridFilterItem, linkOperator?: GridLinkOperator) => void"
    },
    {
      "name": "applyFilterLinkOperator",
      "description": "Changes the GridLinkOperator used to connect the filters.",
      "type": "(operator: GridLinkOperator) => void"
    },
    {
      "name": "applyFilters",
      "description": "Applies all filters on all rows.",
      "type": "() => void"
    },
    {
      "name": "applySorting",
      "description": "Apply the current sorting model to the rows.",
      "type": "() => void"
    },
    {
      "name": "commitCellChange",
      "description": "Commit the cell value changes to update the cell value.",
      "type": "(params: GridEditCellPropsParams) => void"
    },
    {
      "name": "components",
      "description": "The set of overridable components used in the grid.",
      "type": "GridApiRefComponentsProperty"
    },
    {
      "name": "componentsProps",
      "description": "Overrideable components props dynamically passed to the component at rendering.",
      "type": "GridSlotsComponentsProps"
    },
    {
      "name": "deleteFilter",
      "description": "Deletes a GridFilterItem.",
      "type": "(item: GridFilterItem) => void"
    },
    {
      "name": "exportDataAsCsv",
      "description": "Export the grid data as CSV.",
      "type": "() => void"
    },
    {
      "name": "forceUpdate",
      "description": "Allows forcing the grid to rerender after a state update.",
      "type": "Dispatch<any>"
    },
    {
      "name": "getAllColumns",
      "description": "Get all the GridColumns.",
      "type": "() => GridColumns"
    },
    {
      "name": "getAllRowIds",
      "description": "Return the list of row Ids.",
      "type": "() => GridRowId[]"
    },
    {
      "name": "getCellElement",
      "description": "Get the cell DOM element.",
      "type": "(id: GridRowId, field: string) => null | HTMLDivElement"
    },
    {
      "name": "getCellMode",
      "description": "Get the cellMode of a cell.",
      "type": "(id: GridRowId, field: string) => GridCellMode"
    },
    {
      "name": "getCellParams",
      "description": "Get the cell params that are passed in events.",
      "type": "(id: GridRowId, field: string) => GridCellParams"
    },
    {
      "name": "getCellValue",
      "description": "Get the cell value of a row and field.",
      "type": "(id: GridRowId, field: string) => GridCellValue"
    },
    {
      "name": "getColumn",
      "description": "Retrieve a column from its field.",
      "type": "(field: string) => GridColDef"
    },
    {
      "name": "getColumnHeaderElement",
      "description": "Get the column header DOM element.",
      "type": "(field: string) => null | HTMLDivElement"
    },
    {
      "name": "getColumnHeaderParams",
      "description": "Get the header params that are passed in events.",
      "type": "(field: string) => GridColumnHeaderParams"
    },
    {
      "name": "getColumnIndex",
      "description": "Get the index position of the column in the array of <a href=\"/api/data-grid/grid-col-def\">GridColDef</a>.",
      "type": "(field: string, useVisibleColumns?: boolean) => number"
    },
    {
      "name": "getColumnPosition",
      "description": "Get the column left position in pixel relative to the left grid inner border.",
      "type": "(field: string) => number"
    },
    {
      "name": "getColumnsMeta",
      "description": "Get the columns meta data.",
      "type": "() => GridColumnsMeta"
    },
    {
      "name": "getContainerPropsState",
      "description": "Get the current containerProps.",
      "type": "() => null | GridContainerProps"
    },
    { "name": "getDataAsCsv", "description": "Get the grid data as CSV.", "type": "() => string" },
    {
      "name": "getEditCellProps",
      "description": "Get the edit cell input props.",
      "type": "(rowId: GridRowId, field: string) => GridEditCellProps"
    },
    {
      "name": "getEditCellPropsParams",
      "description": "Get the edit cell input props params passed in handler.",
      "type": "(rowId: GridRowId, field: string) => GridEditCellPropsParams"
    },
    {
      "name": "getEditCellValueParams",
      "description": "Get the edit cell value params.",
      "type": "(rowId: GridRowId, field: string) => GridEditCellValueParams"
    },
    {
      "name": "getEditRowsModel",
      "description": "Get the edit rows model of the grid.",
      "type": "() => GridEditRowsModel"
    },
    {
      "name": "getLocaleText",
      "description": "Get grid text.",
      "type": "(key: T) => GridLocaleText[T]"
    },
    {
      "name": "getRenderContextState",
      "description": "Get the current renderContext.",
      "type": "() => undefined | Partial<GridRenderContextProps>"
    },
    {
      "name": "getRow",
      "description": "Get the GridRowModel of a given id.",
      "type": "(id: GridRowId) => GridRowData"
    },
    {
      "name": "getRowElement",
      "description": "Get the row DOM element.",
      "type": "(id: GridRowId) => null | HTMLDivElement"
    },
    {
      "name": "getRowIdFromRowIndex",
      "description": "Get the GridRowId of a row at a specific position.",
      "type": "(index: number) => GridRowId"
    },
    {
      "name": "getRowIndex",
      "description": "Get the row index of a row with a given id.",
      "type": "(id: GridRowId) => number"
    },
    {
      "name": "getRowModels",
      "description": "Get the full set of rows as Map&lt;GridRowId, GridRowModel&gt;.",
      "type": "() => Map<GridRowId, GridRowData>"
    },
    {
      "name": "getRowParams",
      "description": "Get the row params that are passed in events.",
      "type": "(id: GridRowId) => GridRowParams"
    },
    {
      "name": "getRowsCount",
      "description": "Get the total number of rows in the grid.",
      "type": "() => number"
    },
    {
      "name": "getScrollPosition",
      "description": "Get the current scroll position.",
      "type": "() => GridScrollParams"
    },
    {
      "name": "getSelectedRows",
      "description": "Get an array of selected rows.",
      "type": "() => Map<GridRowId, GridRowData>"
    },
    {
      "name": "getSortModel",
      "description": "Get the sort model currently applied to the grid.",
      "type": "() => GridSortModel"
    },
    {
      "name": "getSortedRowIds",
      "description": "Get the full set of sorted row ids as GridRowId.",
      "type": "() => GridRowId[]"
    },
    {
      "name": "getSortedRows",
      "description": "Get the full set of sorted rows as GridRowModel.",
      "type": "() => GridRowData[]"
    },
    {
      "name": "getState",
      "description": "Allows to get the whole state of the grid if stateId is null or to get a part of the state if stateId has a value.",
      "type": "(stateId?: string) => T"
    },
    {
      "name": "getVisibleColumns",
      "description": "Get the currently visible columns.",
      "type": "() => GridColumns"
    },
    {
      "name": "getVisibleRowModels",
      "description": "Returns a sorted <code>Map</code> containing only the visible rows.",
      "type": "() => Map<GridRowId, GridRowData>"
    },
    { "name": "hideColumnMenu", "description": "Hide the column menu.", "type": "() => void" },
    { "name": "hideFilterPanel", "description": "Hides the filter panel.", "type": "() => void" },
    {
      "name": "hidePreferences",
      "description": "Hide the preferences panel.",
      "type": "() => void"
    },
    {
      "name": "isCellEditable",
      "description": "Returns true if the cell is editable.",
      "type": "(params: GridCellParams) => boolean"
    },
    {
      "name": "isColumnVisibleInWindow",
      "description": "Check if a column at index is currently visible in the viewport.",
      "type": "(colIndex: number) => boolean"
    },
    {
      "name": "resize",
      "description": "Trigger a resize of the component, and recalculation of width and height.",
      "type": "() => void"
    },
    {
      "name": "scroll",
      "description": "Trigger the grid viewport to scroll to the position in pixel.",
      "type": "(params: Partial<GridScrollParams>) => void"
    },
    {
      "name": "scrollToIndexes",
      "description": "Trigger the grid viewport to scroll to a row of x y indexes.",
      "type": "(params: Optional<GridCellIndexCoordinates, rowIndex>) => boolean"
    },
    {
      "name": "selectRow",
      "description": "Toggle the row selected state.",
      "type": "(id: GridRowId, isSelected?: boolean, allowMultiple?: boolean) => void"
    },
    {
      "name": "selectRows",
      "description": "Batch toggle rows selected state.",
      "type": "(ids: GridRowId[], isSelected?: boolean, deselectOtherRows?: boolean) => void"
    },
    {
      "name": "setCellFocus",
      "description": "Set the active element to the cell with the indexes.",
      "type": "(id: GridRowId, field: string) => void"
    },
    {
      "name": "setCellMode",
      "description": "Set the cellMode of a cell.",
      "type": "(id: GridRowId, field: string, mode: GridCellMode) => void"
    },
    {
      "name": "setCellValue",
      "description": "Set the cell value.",
      "type": "(params: GridEditCellValueParams) => void"
    },
    {
      "name": "setColumnHeaderFocus",
      "description": "Set the active element to the column header with the indexes.",
      "type": "(field: string) => void"
    },
    {
      "name": "setColumnIndex",
      "description": "Allows to move a column to another position in the column array.",
      "type": "(field: string, targetIndexPosition: number) => void"
    },
    {
      "name": "setColumnVisibility",
      "description": "Allows to toggle a column.",
      "type": "(field: string, isVisible: boolean) => void"
    },
    {
      "name": "setColumnWidth",
      "description": "Allows to set target column width.",
      "type": "(field: string, width: number) => void"
    },
    {
      "name": "setDensity",
      "description": "Set density of the grid.",
      "type": "(size: GridDensity, headerHeight?: any, rowHeight?: any) => void"
    },
    {
      "name": "setEditCellProps",
      "description": "Set the edit cell input props.",
      "type": "(params: GridEditCellPropsParams) => void"
    },
    {
      "name": "setEditRowsModel",
      "description": "Set the edit rows model of the grid.",
      "type": "(model: GridEditRowsModel) => void"
    },
    {
      "name": "setFilterModel",
      "description": "Sets the filter model.",
      "type": "(model: GridFilterModelState) => void"
    },
    {
      "name": "setPage",
      "description": "Set the displayed page.",
      "type": "(page: number) => void"
    },
    {
      "name": "setPageSize",
      "description": "Set the number of rows in one page.",
      "type": "(pageSize: number) => void"
    },
    {
      "name": "setRows",
      "description": "Set a new set of Rows.",
      "type": "(rows: GridRowData[]) => void"
    },
    {
      "name": "setSelectionModel",
      "description": "Reset the selected rows to the array of ids passed in parameter",
      "type": "(rowIds: GridRowId[]) => void"
    },
    {
      "name": "setSortModel",
      "description": "Set the sort model and trigger the sorting of rows.",
      "type": "(model: GridSortModel) => void"
    },
    {
      "name": "setState",
      "description": "Allows to set/reset the whole state of the grid.",
      "type": "(state: GridState | (previousState: GridState) => GridState) => void"
    },
    {
      "name": "showColumnMenu",
      "description": "Display the column menu under the field column.",
      "type": "(field: string) => void"
    },
    {
      "name": "showError",
      "description": "Display the error overlay component.",
      "type": "(props: any) => void"
    },
    {
      "name": "showFilterPanel",
      "description": "Shows the filter panel. If <code>targetColumnField</code> is given, a filter for this field is also added.",
      "type": "(targetColumnField?: string) => void"
    },
    {
      "name": "showPreferences",
      "description": "Display the preferences panel with the GridPreferencePanelsValue opened.",
      "type": "(newValue: GridPreferencePanelsValue) => void"
    },
    {
      "name": "sortColumn",
      "description": "Set the sort direction of a column.",
      "type": "(column: GridColDef, direction?: GridSortDirection, allowMultipleSorting?: boolean) => void"
    },
    {
      "name": "state",
      "description": "Property that contains the whole state of the grid.",
      "type": "GridState"
    },
    {
      "name": "subscribeEvent",
      "description": "Allows to register a handler for an event.",
      "type": "(event: string, handler: (params: any, event?: SyntheticEvent<Element, Event>) => void, options?: GridSubscribeEventOptions) => () => void"
    },
    {
      "name": "toggleColumnMenu",
      "description": "Toggle the column menu under the field column.",
      "type": "(field: string) => void"
    },
    {
      "name": "updateColumn",
      "description": "Allows to update a column <a href=\"/api/data-grid/grid-col-def\">GridColDef</a> model.",
      "type": "(col: GridColDef) => void"
    },
    {
      "name": "updateColumns",
      "description": "Allows to batch update multiple columns at the same time.",
      "type": "(cols: GridColDef[], resetColumnState?: boolean) => void"
    },
    {
      "name": "updateRows",
      "description": "Update any properties of the current set of GridRowData[].",
      "type": "(updates: GridRowModelUpdate<>[]) => void"
    },
    {
      "name": "updateViewport",
      "description": "Refresh the viewport cells according to the scroll positions",
      "type": "(forceRender?: boolean) => void"
    },
    {
      "name": "upsertFilter",
      "description": "Updates or inserts a GridFilterItem.",
      "type": "(item: GridFilterItem) => void"
    }
  ]
}
