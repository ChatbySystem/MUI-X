{
  "name": "GridApi",
  "description": "The full grid API.",
  "properties": [
    {
      "name": "applySorting",
      "description": "Applies the current sort model to the rows.",
      "type": "() => void"
    },
    {
      "name": "commitCellChange",
      "description": "Updates the field at the given id with the value stored in the edit row model.",
      "type": "(params: GridCommitCellChangeParams, event?: MuiBaseEvent | undefined) => boolean | Promise<boolean>"
    },
    {
      "name": "commitRowChange",
      "description": "Updates the row at the given id with the values stored in the edit row model.",
      "type": "(id: GridRowId, event?: MuiBaseEvent | undefined) => boolean | Promise<boolean>"
    },
    {
      "name": "deleteFilterItem",
      "description": "Deletes a GridFilterItem.",
      "type": "(item: GridFilterItem) => void"
    },
    {
      "name": "exportDataAsCsv",
      "description": "Downloads and exports a CSV of the grid&#39;s data.",
      "type": "(options?: GridCsvExportOptions | undefined) => void"
    },
    {
      "name": "exportDataAsPrint",
      "description": "Print the grid&#39;s data.",
      "type": "(options?: GridPrintExportOptions | undefined) => void"
    },
    {
      "name": "forceUpdate",
      "description": "Forces the grid to rerender. It&#39;s often used after a state update.",
      "type": "Dispatch<any>"
    },
    {
      "name": "getAllColumns",
      "description": "Returns an array of <a href=\"/api/data-grid/grid-col-def/\">GridColDef</a> containing all the column definitions.",
      "type": "() => GridStateColDef[]"
    },
    {
      "name": "getAllRowIds",
      "description": "Gets the list of row ids.",
      "type": "() => GridRowId[]"
    },
    {
      "name": "getCellElement",
      "description": "Gets the underlying DOM element for a cell at the given <code>id</code> and <code>field</code>.",
      "type": "(id: GridRowId, field: string) => HTMLDivElement | null"
    },
    {
      "name": "getCellMode",
      "description": "Gets the mode of a cell.",
      "type": "(id: GridRowId, field: string) => GridCellMode"
    },
    {
      "name": "getCellParams",
      "description": "Gets the <a href=\"/api/data-grid/grid-cell-params/\">GridCellParams</a> object that is passed as argument in events.",
      "type": "(id: GridRowId, field: string) => GridCellParams<any, any, any>"
    },
    {
      "name": "getCellValue",
      "description": "Gets the value of a cell at the given <code>id</code> and <code>field</code>.",
      "type": "(id: GridRowId, field: string) => GridCellValue"
    },
    {
      "name": "getColumn",
      "description": "Returns the <a href=\"/api/data-grid/grid-col-def/\">GridColDef</a> for the given <code>field</code>.",
      "type": "(field: string) => GridStateColDef"
    },
    {
      "name": "getColumnHeaderElement",
      "description": "Gets the underlying DOM element for the column header with the given <code>field</code>.",
      "type": "(field: string) => HTMLDivElement | null"
    },
    {
      "name": "getColumnHeaderParams",
      "description": "Gets the GridColumnHeaderParams object that is passed as argument in events.",
      "type": "(field: string) => GridColumnHeaderParams"
    },
    {
      "name": "getColumnIndex",
      "description": "Returns the index position of a column. By default, only the visible columns are considered.\nPass <code>false</code> to <code>useVisibleColumns</code> to consider all columns.",
      "type": "(field: string, useVisibleColumns?: boolean | undefined) => number"
    },
    {
      "name": "getColumnPosition",
      "description": "Returns the left-position of a column relative to the inner border of the grid.",
      "type": "(field: string) => number"
    },
    {
      "name": "getColumnsMeta",
      "description": "Returns the GridColumnsMeta for each column.",
      "type": "() => GridColumnsMeta"
    },
    {
      "name": "getDataAsCsv",
      "description": "Returns the grid data as a CSV string.\nThis method is used internally by <code>exportDataAsCsv</code>.",
      "type": "(options?: GridCsvExportOptions | undefined) => string"
    },
    {
      "name": "getEditRowsModel",
      "description": "Gets the edit rows model of the grid.",
      "type": "() => GridEditRowsModel"
    },
    {
      "name": "getLocaleText",
      "description": "Returns the translation for the <code>key</code>.",
      "type": "<T extends keyof GridLocaleText>(key: T) => GridLocaleText[T]"
    },
    {
      "name": "getRootDimensions",
      "description": "Returns the dimensions of the grid",
      "type": "() => GridDimensions | null"
    },
    {
      "name": "getRow",
      "description": "Gets the row data with a given id.",
      "type": "(id: GridRowId) => { [key: string]: any; } | null"
    },
    {
      "name": "getRowElement",
      "description": "Gets the underlying DOM element for a row at the given <code>id</code>.",
      "type": "(id: GridRowId) => HTMLDivElement | null"
    },
    {
      "name": "getRowIdFromRowIndex",
      "description": "Gets the <code>GridRowId</code> of a row at a specific index.\nThe index is based on the sorted but unfiltered row list.",
      "type": "(index: number) => GridRowId"
    },
    {
      "name": "getRowIndex",
      "description": "Gets the row index of a row with a given id.\nThe index is based on the sorted but unfiltered row list.",
      "type": "(id: GridRowId) => number"
    },
    {
      "name": "getRowMode",
      "description": "Gets the mode of a row.",
      "type": "(id: GridRowId) => GridRowMode"
    },
    {
      "name": "getRowModels",
      "description": "Gets the full set of rows as Map&lt;GridRowId, GridRowModel&gt;.",
      "type": "() => Map<GridRowId, { [key: string]: any; }>"
    },
    {
      "name": "getRowNode",
      "description": "Gets the row node from the internal tree structure.",
      "type": "(id: GridRowId) => GridRowTreeNodeConfig | null"
    },
    {
      "name": "getRowParams",
      "description": "Gets the <a href=\"/api/data-grid/grid-row-params/\">GridRowParams</a> object that is passed as argument in events.",
      "type": "(id: GridRowId) => GridRowParams<{ [key: string]: any; }>"
    },
    {
      "name": "getRowsCount",
      "description": "Gets the total number of rows in the grid.",
      "type": "() => number"
    },
    {
      "name": "getScrollPosition",
      "description": "Returns the current scroll position.",
      "type": "() => GridScrollParams"
    },
    {
      "name": "getSelectedRows",
      "description": "Returns an array of the selected rows.",
      "type": "() => Map<GridRowId, { [key: string]: any; }>"
    },
    {
      "name": "getSortedRowIds",
      "description": "Returns all row ids sorted according to the active sort model.",
      "type": "() => GridRowId[]"
    },
    {
      "name": "getSortedRows",
      "description": "Returns all rows sorted according to the active sort model.",
      "type": "() => { [key: string]: any; }[]"
    },
    {
      "name": "getSortModel",
      "description": "Returns the sort model currently applied to the grid.",
      "type": "() => GridSortModel"
    },
    {
      "name": "getVisibleColumns",
      "description": "Returns the currently visible columns.",
      "type": "() => GridStateColDef[]"
    },
    {
      "name": "getVisibleRowModels",
      "description": "Returns a sorted <code>Map</code> containing only the visible rows.",
      "type": "() => Map<GridRowId, { [key: string]: any; }>"
    },
    {
      "name": "hideColumnMenu",
      "description": "Hides the column menu that is open.",
      "type": "() => void"
    },
    { "name": "hideFilterPanel", "description": "Hides the filter panel.", "type": "() => void" },
    {
      "name": "hidePreferences",
      "description": "Hides the preferences panel.",
      "type": "() => void"
    },
    {
      "name": "isCellEditable",
      "description": "Controls if a cell is editable.",
      "type": "(params: GridCellParams<any, any, any>) => boolean"
    },
    {
      "name": "isRowSelected",
      "description": "Determines if a row is selected or not.",
      "type": "(id: GridRowId) => boolean"
    },
    { "name": "publishEvent", "description": "Emits an event.", "type": "GridEventPublisher" },
    {
      "name": "resize",
      "description": "Triggers a resize of the component and recalculation of width and height.",
      "type": "() => void"
    },
    {
      "name": "scroll",
      "description": "Triggers the viewport to scroll to the given positions (in pixels).",
      "type": "(params: Partial<GridScrollParams>) => void"
    },
    {
      "name": "scrollToIndexes",
      "description": "Triggers the viewport to scroll to the cell at indexes given by <code>params</code>.\nReturns <code>true</code> if the grid had to scroll to reach the target.",
      "type": "(params: Partial<GridCellIndexCoordinates>) => boolean"
    },
    {
      "name": "selectRow",
      "description": "Change the selection state of a row.",
      "type": "(id: GridRowId, isSelected?: boolean | undefined, resetSelection?: boolean | undefined) => void"
    },
    {
      "name": "selectRowRange",
      "description": "Change the selection state of all the selectable rows in a range.",
      "type": "(range: { startId: GridRowId; endId: GridRowId; }, isSelected?: boolean | undefined, resetSelection?: boolean | undefined) => void"
    },
    {
      "name": "selectRows",
      "description": "Change the selection state of multiple rows.",
      "type": "(ids: GridRowId[], isSelected?: boolean | undefined, resetSelection?: boolean | undefined) => void"
    },
    {
      "name": "setCellFocus",
      "description": "Sets the focus to the cell at the given <code>id</code> and <code>field</code>.",
      "type": "(id: GridRowId, field: string) => void"
    },
    {
      "name": "setCellMode",
      "description": "Sets the mode of a cell.",
      "type": "(id: GridRowId, field: string, mode: GridCellMode) => void"
    },
    {
      "name": "setColumnHeaderFocus",
      "description": "Sets the focus to the column header at the given <code>field</code>.",
      "type": "(field: string, event?: MuiBaseEvent | undefined) => void"
    },
    {
      "name": "setColumnIndex",
      "description": "Moves a column from its original position to the position given by <code>targetIndexPosition</code>.",
      "type": "(field: string, targetIndexPosition: number) => void"
    },
    {
      "name": "setColumnVisibility",
      "description": "Changes the visibility of the column referred by <code>field</code>.",
      "type": "(field: string, isVisible: boolean) => void"
    },
    {
      "name": "setColumnWidth",
      "description": "Updates the width of a column.",
      "type": "(field: string, width: number) => void"
    },
    {
      "name": "setDensity",
      "description": "Sets the density of the grid.",
      "type": "(density: GridDensity, headerHeight?: number | undefined, rowHeight?: number | undefined) => void"
    },
    {
      "name": "setEditCellValue",
      "description": "Sets the value of the edit cell.\nCommonly used inside the edit cell component.",
      "type": "(params: GridEditCellValueParams, event?: MuiBaseEvent | undefined) => void"
    },
    {
      "name": "setEditRowsModel",
      "description": "Set the edit rows model of the grid.",
      "type": "(model: GridEditRowsModel) => void"
    },
    {
      "name": "setFilterLinkOperator",
      "description": "Changes the GridLinkOperator used to connect the filters.",
      "type": "(operator: GridLinkOperator) => void"
    },
    {
      "name": "setFilterModel",
      "description": "Sets the filter model to the one given by <code>model</code>.",
      "type": "(model: GridFilterModel) => void"
    },
    {
      "name": "setPage",
      "description": "Sets the displayed page to the value given by <code>page</code>.",
      "type": "(page: number) => void"
    },
    {
      "name": "setPageSize",
      "description": "Sets the number of displayed rows to the value given by <code>pageSize</code>.",
      "type": "(pageSize: number) => void"
    },
    {
      "name": "setRowChildrenExpansion",
      "description": "Expand or collapse a row children.",
      "type": "(id: GridRowId, isExpanded: boolean) => void"
    },
    {
      "name": "setRowMode",
      "description": "Sets the mode of a row.",
      "type": "(id: GridRowId, mode: GridRowMode) => void"
    },
    {
      "name": "setRows",
      "description": "Sets a new set of rows.",
      "type": "(rows: { [key: string]: any; }[]) => void"
    },
    {
      "name": "setSelectionModel",
      "description": "Updates the selected rows to be those passed to the <code>rowIds</code> argument.\nAny row already selected will be unselected.",
      "type": "(rowIds: GridRowId[]) => void"
    },
    {
      "name": "setSortModel",
      "description": "Updates the sort model and triggers the sorting of rows.",
      "type": "(model: GridSortModel) => void"
    },
    {
      "name": "setState",
      "description": "Sets the whole state of the grid.",
      "type": "(state: GridState | ((previousState: GridState) => GridState)) => void"
    },
    {
      "name": "showColumnMenu",
      "description": "Display the column menu under the <code>field</code> column.",
      "type": "(field: string) => void"
    },
    {
      "name": "showError",
      "description": "Displays the error overlay component.",
      "type": "(props: any) => void"
    },
    {
      "name": "showFilterPanel",
      "description": "Shows the filter panel. If <code>targetColumnField</code> is given, a filter for this field is also added.",
      "type": "(targetColumnField?: string | undefined) => void"
    },
    {
      "name": "showPreferences",
      "description": "Displays the preferences panel. The <code>newValue</code> argument controls the content of the panel.",
      "type": "(newValue: GridPreferencePanelsValue) => void"
    },
    {
      "name": "sortColumn",
      "description": "Sorts a column.",
      "type": "(column: GridColDef, direction?: GridSortDirection, allowMultipleSorting?: boolean | undefined) => void"
    },
    {
      "name": "state",
      "description": "Property that contains the whole state of the grid.",
      "type": "GridState"
    },
    {
      "name": "subscribeEvent",
      "description": "Registers a handler for an event.",
      "type": "<E extends \"resize\" | \"debouncedResize\" | \"viewportInnerSizeChange\" | \"componentError\" | \"unmount\" | \"cellModeChange\" | \"cellClick\" | \"cellDoubleClick\" | \"cellMouseDown\" | \"cellMouseUp\" | ... 53 more ... | \"columnVisibilityChange\">(event: E, handler: GridEventListener<...>, options?: EventListenerOptions | undefined..."
    },
    {
      "name": "toggleColumnMenu",
      "description": "Toggles the column menu under the <code>field</code> column.",
      "type": "(field: string) => void"
    },
    {
      "name": "updateColumn",
      "description": "Updates the definition of a column.",
      "type": "(col: GridColDef) => void"
    },
    {
      "name": "updateColumns",
      "description": "Updates the definition of multiple columns at the same time.",
      "type": "(cols: GridColDef[]) => void"
    },
    {
      "name": "updateRows",
      "description": "Allows to updates, insert and delete rows in a single call.",
      "type": "(updates: GridRowModelUpdate[]) => void"
    },
    {
      "name": "upsertFilterItem",
      "description": "Updates or inserts a GridFilterItem.",
      "type": "(item: GridFilterItem) => void"
    }
  ]
}
