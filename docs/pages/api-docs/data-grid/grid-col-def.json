{
  "name": "GridColDef",
  "description": "Column Definition interface.",
  "properties": [
    {
      "name": "align",
      "description": "Allows to align the column values in cells.",
      "type": "GridAlignment"
    },
    {
      "name": "cellClassName",
      "description": "Class name that will be added in cells for that column.",
      "type": "GridCellClassNamePropType"
    },
    {
      "name": "cellClassRules",
      "description": "Set of CSS class rules that will be dynamically applied on cells.",
      "type": "GridCellClassRules"
    },
    {
      "name": "description",
      "description": "The description of the column rendered as tooltip if the column header name is not fully displayed.",
      "type": "string"
    },
    {
      "name": "disableClickEventBubbling",
      "description": "Allows to disable the click event in cells.",
      "type": "boolean"
    },
    {
      "name": "disableColumnMenu",
      "description": "If <code>true</code>, the column menu is disabled for this column.",
      "type": "boolean"
    },
    {
      "name": "editable",
      "description": "If <code>true</code>, the cells of the column are editable.",
      "type": "boolean"
    },
    {
      "name": "field",
      "description": "The column identifier. It&#39;s used to map with GridRowData values.",
      "type": "string"
    },
    {
      "name": "filterOperators",
      "description": "Allows setting the filter operators for this column.",
      "type": "GridFilterOperator[]"
    },
    {
      "name": "filterable",
      "description": "If <code>true</code>, the column is filterable.",
      "type": "boolean"
    },
    {
      "name": "flex",
      "description": "If set, it indicates that a column has fluid width. Range [0, âˆž).",
      "type": "number"
    },
    {
      "name": "headerAlign",
      "description": "Header cell element alignment.",
      "type": "GridAlignment"
    },
    {
      "name": "headerClassName",
      "description": "Class name that will be added in the column header cell.",
      "type": "string | string[]"
    },
    {
      "name": "headerName",
      "description": "The title of the column rendered in the column header cell.",
      "type": "string"
    },
    { "name": "hide", "description": "If <code>true</code>, hide the column.", "type": "boolean" },
    {
      "name": "hideSortIcons",
      "description": "Toggle the visibility of the sort icons.",
      "type": "boolean"
    },
    {
      "name": "renderCell",
      "description": "Allows to override the component rendered as cell for this column.",
      "type": "(params: GridCellParams) => ReactElement<any, string | JSXElementConstructor<any>>"
    },
    {
      "name": "renderEditCell",
      "description": "Allows to override the component rendered in edit cell mode for this column.",
      "type": "(params: GridCellParams) => ReactElement<any, string | JSXElementConstructor<any>>"
    },
    {
      "name": "renderHeader",
      "description": "Allows to render a component in the column header cell.",
      "type": "(params: GridColumnHeaderParams) => ReactElement<any, string | JSXElementConstructor<any>>"
    },
    {
      "name": "resizable",
      "description": "If <code>true</code>, the column is resizable.",
      "type": "boolean"
    },
    {
      "name": "sortComparator",
      "description": "A comparator function used to sort rows.",
      "type": "GridComparatorFn"
    },
    {
      "name": "sortable",
      "description": "If <code>true</code>, the column is sortable.",
      "type": "boolean"
    },
    {
      "name": "type",
      "description": "Type allows to merge this object with a default definition <a href=\"/api/data-grid/grid-col-def\">GridColDef</a>.",
      "type": "string"
    },
    {
      "name": "valueFormatter",
      "description": "Function that allows to apply a formatter before rendering its value.",
      "type": "(params: GridValueFormatterParams) => GridCellValue"
    },
    {
      "name": "valueGetter",
      "description": "Function that allows to get a specific data instead of field to render in the cell.",
      "type": "(params: GridValueGetterParams) => GridCellValue"
    },
    { "name": "width", "description": "Set the width of the column.", "type": "number" }
  ]
}
